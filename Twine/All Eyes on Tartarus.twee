:: StoryTitle
All Eyes on Tartarus


:: StoryData
{
  "ifid": "603cb76a-579d-4d57-bff2-50fc09301310",
  "format": "Harlowe",
  "format-version": "3.3.9",
  "start": "Intro 1",
  "zoom": 1
}


:: Intro 1 {"position":"600,200","size":"100,100"}
All Eyes on Tartarus
<!-- Allow audio button  (unmute all audio) -->
<button id="playAudioButton">Allow Audio</button>
<script>
  // So far we only need to umute:
  // id="submarine-song"
  document.getElementById("playAudioButton").addEventListener("click", function() {
    audioMuted = false;
  }); 
</script>
[[Continue->Intro 2]]


:: Intro 2 {"position":"800,200","size":"100,100"}
The Silent Service
<!-- Take Her Down! (The Submarine Song) -->
<script>
  // If audio is already defined, we should stop it before starting a new one
  if (typeof audio !== 'undefined') {
    audio.pause();
    // And probably remove it from the memory
    delete audio;
  }
  audioSource = "../assets/take-her-down-submariners.mp3";
  audio = new Audio(audioSource);
  audio.loop = true;
  // audio.muted = audioMuted;
  // If audioMuted is not defined, this will break the script
  // So we need to check and prevent this from happening
  if (typeof audioMuted !== 'undefined') {
    audio.muted = audioMuted;
  }
  audio.play();
</script>
[[Continue->Intro 3]]

:: Intro 3 {"position":"1000,200","size":"100,100"}
Construimus, Batuimus
<!-- The Seabees Song -->
<script>
  // Stops the previous audio
  if (typeof audio !== 'undefined') {
    audio.pause();
    delete audio;
  }
  audioSource = "../assets/song-of-the-seabees.mp3";
  audio = new Audio(audioSource);
  audio.loop = true;
  if (typeof audioMuted !== 'undefined') {
    audio.muted = audioMuted;
  }
  audio.play();
</script>
[[Continue->Intro 4]]

:: Intro 4 {"position":"1200,200","size":"100,100"}
Anchors Aweigh
<!-- Anchors Aweigh -->
<script>
  // Stops the previous audio
  if (typeof audio !== 'undefined') {
    audio.pause();
    delete audio;
  }
  audioSource = "../assets/anchors-aweigh.mp3";
  audio = new Audio(audioSource);
  audio.loop = true;
  if (typeof audioMuted !== 'undefined') {
    audio.muted = audioMuted;
  }
  audio.play();
</script>

<!-- The sensor game -->


<!-- Not a game yet, just a circle with a line drawn from the center to the edge 
which continuously rotates around the center, like a radar, and which leaves a fading ghost
of the line behind it. -->
<canvas id="radar" width="800" height="800"></canvas>
<script>
  (function() {
    const canvas = document.getElementById("radar");
    const ctx = canvas.getContext("2d");
    const width = canvas.width;
    const height = canvas.height;
    const centerX = width / 2;
    const centerY = height / 2;
    const radius = Math.min(width, height) / 2 - 10;
    let angle = 0;
  
    // Fill the canvas with black initially to match Twine's background color
    ctx.fillStyle = "black";
    ctx.fillRect(0, 0, width, height);
  
    function drawRadar() {
      // Draw a semi-transparent black overlay to fade previous drawings
      ctx.fillStyle = "rgba(0, 0, 0, 0.1)";
      ctx.fillRect(0, 0, width, height);
  
      // Draw the circle outline
      ctx.beginPath();
      ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);
      ctx.strokeStyle = "#00FF00";
      ctx.lineWidth = 2;
      ctx.stroke();
  
      // Calculate the endpoint of the rotating line
      const endX = centerX + radius * Math.cos(angle);
      const endY = centerY + radius * Math.sin(angle);
  
      // Draw the rotating line
      ctx.beginPath();
      ctx.moveTo(centerX, centerY);
      ctx.lineTo(endX, endY);
      ctx.strokeStyle = "#00FF00";
      ctx.lineWidth = 2;
      ctx.stroke();
  
      // Drawing a bunch of semi-transparent black overlays won't quite make the line fade to black
      // when the opacity is too small (about < 0.2), so we can also draw a second rotating line out
      // of phase with the first to help darken the line
      const endX2 = centerX + radius * Math.cos(angle - Math.PI / 10);
      const endY2 = centerY + radius * Math.sin(angle - Math.PI / 10);
      ctx.beginPath();
      ctx.moveTo(centerX, centerY);
      ctx.lineTo(endX2, endY2);
      ctx.strokeStyle = "#000000";
      ctx.lineWidth = 8;
      ctx.stroke();
  
      // Update the angle (rotate 0.5 degree per frame)
      angle += Math.PI / 360;
  
      // Clamp the angle to avoid floating point precision issues
      if (angle >= Math.PI * 2) {
        angle = 0;
      }
  
      setTimeout(drawRadar, 10);
    }
  
    drawRadar();
  })();
  </script>



:: StoryStylesheet [stylesheet]
img {
  display: block;
  margin-left: auto;
  margin-right: auto;
  width: 800px;
}